type token =
  | INT of (int)
  | FLOAT of (float)
  | BOOL of (bool)
  | STRING of (string)
  | ID of (string)
  | ADD
  | SUB
  | MUL
  | DIV
  | REM
  | LT
  | LE
  | EQ
  | NE
  | GE
  | GT
  | AND
  | OR
  | NOT
  | COLON
  | ASSIGN
  | LPAREN
  | RPAREN
  | COMMA
  | ARROW
  | FATARROW
  | LBRACK
  | RBRACK
  | LCHAIN
  | RCHAIN
  | CONST
  | FUN
  | TYPE
  | IF
  | THEN
  | ELSE
  | FI
  | LET
  | IN
  | TEL
  | CASE
  | BAR
  | OF
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "src/parser/parser.mly"
  open Ast
  open Errors
  open Printf

  let rec split_typed_ids tids =
    match tids with
    | [] -> ([], [])
    | (i, t) :: xs -> 
    let (is, ts) = split_typed_ids xs in 
    (i :: is, t :: ts) 

  let _raise_error (msg: string) = 
    let error_pos = get_pos (Parsing.symbol_start_pos ()) in
    raise (ParsingError (sprintf "%s | ln: %d | col: %d \n" msg error_pos.ln error_pos.col))

# 66 "src/parser/parser.ml"
let yytransl_const = [|
  262 (* ADD *);
  263 (* SUB *);
  264 (* MUL *);
  265 (* DIV *);
  266 (* REM *);
  267 (* LT *);
  268 (* LE *);
  269 (* EQ *);
  270 (* NE *);
  271 (* GE *);
  272 (* GT *);
  273 (* AND *);
  274 (* OR *);
  275 (* NOT *);
  276 (* COLON *);
  277 (* ASSIGN *);
  278 (* LPAREN *);
  279 (* RPAREN *);
  280 (* COMMA *);
  281 (* ARROW *);
  282 (* FATARROW *);
  283 (* LBRACK *);
  284 (* RBRACK *);
  285 (* LCHAIN *);
  286 (* RCHAIN *);
  287 (* CONST *);
  288 (* FUN *);
  289 (* TYPE *);
  290 (* IF *);
  291 (* THEN *);
  292 (* ELSE *);
  293 (* FI *);
  294 (* LET *);
  295 (* IN *);
  296 (* TEL *);
  297 (* CASE *);
  298 (* BAR *);
  299 (* OF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* STRING *);
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\007\000\007\000\008\000\008\000\008\000\009\000\
\009\000\010\000\010\000\011\000\011\000\011\000\011\000\012\000\
\012\000\013\000\013\000\013\000\013\000\006\000\006\000\014\000\
\014\000\014\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\017\000\017\000\020\000\020\000\020\000\
\021\000\021\000\022\000\022\000\023\000\023\000\023\000\023\000\
\018\000\018\000\019\000\019\000\024\000\024\000\024\000\024\000\
\016\000\016\000\025\000\025\000\025\000\015\000\015\000\015\000\
\015\000\015\000\004\000\004\000\004\000\026\000\026\000\026\000\
\000\000"

let yylen = "\002\000\
\001\000\001\000\000\000\001\000\002\000\001\000\006\000\009\000\
\003\000\001\000\001\000\001\000\002\000\003\000\001\000\004\000\
\001\000\001\000\001\000\000\000\001\000\003\000\001\000\003\000\
\001\000\000\000\001\000\003\000\001\000\001\000\001\000\006\000\
\009\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\002\000\002\000\003\000\006\000\004\000\
\003\000\004\000\001\000\001\000\001\000\002\000\003\000\001\000\
\006\000\001\000\001\000\001\000\000\000\001\000\003\000\001\000\
\001\000\001\000\001\000\001\000\000\000\001\000\003\000\001\000\
\001\000\001\000\001\000\002\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\001\000\001\000\003\000\001\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\004\000\097\000\000\000\010\000\000\000\
\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\093\000\091\000\000\000\000\000\
\025\000\000\000\000\000\027\000\000\000\017\000\000\000\013\000\
\000\000\093\000\094\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\092\000\000\000\000\000\086\000\087\000\088\000\
\089\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\024\000\000\000\025\000\028\000\000\000\
\021\000\000\000\000\000\095\000\052\000\053\000\000\000\000\000\
\034\000\000\000\000\000\083\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\016\000\000\000\054\000\000\000\000\000\000\000\000\000\034\000\
\084\000\061\000\000\000\057\000\000\000\000\000\000\000\039\000\
\040\000\041\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\022\000\000\000\000\000\000\000\000\000\066\000\000\000\
\062\000\000\000\058\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\000\000\000\000\000\000\000\000\000\000\070\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\071\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\005\000\006\000\011\000\024\000\057\000\027\000\019\000\020\000\
\032\000\066\000\067\000\028\000\029\000\076\000\058\000\077\000\
\108\000\059\000\127\000\109\000\137\000\153\000\154\000\128\000\
\078\000\036\000"

let yysindex = "\004\000\
\002\000\000\000\000\000\000\000\000\000\037\255\000\000\008\255\
\012\255\015\255\000\000\021\255\035\255\009\255\098\255\003\255\
\000\000\006\255\000\000\018\255\000\000\000\000\105\255\045\255\
\000\000\042\255\051\255\000\000\073\255\000\000\080\255\000\000\
\006\255\000\000\000\000\019\255\112\255\098\255\084\255\007\255\
\106\255\000\000\000\000\098\255\000\000\000\000\000\000\000\000\
\000\000\000\000\112\255\112\255\112\255\112\255\040\255\112\255\
\121\002\000\000\086\255\000\000\098\255\000\000\000\000\000\000\
\000\000\095\255\097\255\000\000\000\000\000\000\096\002\041\002\
\000\000\121\255\125\255\000\000\085\255\063\255\016\255\112\255\
\112\255\112\255\112\255\112\255\112\255\112\255\112\255\112\255\
\112\255\112\255\112\255\112\255\112\255\112\255\160\255\111\255\
\000\000\098\255\000\000\112\255\115\255\122\255\112\255\000\000\
\000\000\000\000\014\255\000\000\094\255\046\255\046\255\000\000\
\000\000\000\000\196\255\196\255\162\255\162\255\196\255\196\255\
\177\255\238\255\146\002\146\002\000\000\121\002\126\255\133\255\
\112\255\000\000\204\255\098\255\003\255\121\002\000\000\137\255\
\000\000\014\255\000\000\112\255\121\002\112\255\145\255\153\255\
\053\255\000\000\121\002\121\002\112\255\175\255\000\000\000\000\
\173\255\176\255\121\002\098\255\174\255\202\255\187\255\112\255\
\000\000\112\255\121\002\121\002"

let yyrindex = "\000\000\
\010\000\000\000\067\000\000\000\000\000\223\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\041\255\
\163\001\000\000\000\000\101\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\201\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\099\255\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
\129\000\000\000\000\000\000\000\000\000\000\000\000\000\116\255\
\000\000\000\000\203\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\186\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\119\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\007\002\073\000\107\000\000\000\
\000\000\000\000\141\000\175\000\021\001\058\001\209\000\243\000\
\092\001\126\001\147\001\168\001\071\002\124\255\000\000\205\255\
\000\000\000\000\000\000\000\000\041\255\185\001\000\000\000\000\
\000\000\000\000\000\000\000\000\197\000\000\000\000\000\000\000\
\128\255\000\000\131\255\202\001\000\000\000\000\157\255\000\000\
\000\000\206\255\004\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\219\001\061\255"

let yygindex = "\000\000\
\000\000\000\000\000\000\233\255\252\255\094\000\000\000\000\000\
\198\000\000\000\000\000\190\000\000\000\154\000\000\000\000\000\
\000\000\000\000\000\000\000\000\097\000\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 944
let yytable = "\035\000\
\059\000\004\000\025\000\032\000\001\000\030\000\062\000\026\000\
\017\000\003\000\031\000\026\000\012\000\135\000\060\000\106\000\
\013\000\065\000\136\000\014\000\068\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\032\000\032\000\007\000\096\000\035\000\073\000\
\015\000\043\000\032\000\044\000\093\000\094\000\069\000\070\000\
\071\000\072\000\018\000\079\000\151\000\082\000\083\000\084\000\
\016\000\152\000\107\000\033\000\033\000\038\000\104\000\026\000\
\026\000\037\000\002\000\008\000\009\000\010\000\074\000\075\000\
\037\000\039\000\130\000\110\000\111\000\112\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\124\000\126\000\033\000\033\000\074\000\075\000\131\000\
\040\000\021\000\134\000\033\000\011\000\041\000\022\000\061\000\
\034\000\064\000\038\000\095\000\143\000\022\000\022\000\045\000\
\046\000\047\000\048\000\049\000\050\000\097\000\051\000\023\000\
\098\000\020\000\020\000\103\000\141\000\101\000\023\000\023\000\
\007\000\102\000\052\000\129\000\159\000\053\000\132\000\147\000\
\138\000\148\000\019\000\023\000\042\000\077\000\077\000\133\000\
\155\000\054\000\078\000\078\000\139\000\055\000\069\000\069\000\
\056\000\079\000\079\000\163\000\140\000\164\000\145\000\125\000\
\046\000\047\000\048\000\049\000\050\000\149\000\051\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\043\000\150\000\
\089\000\090\000\052\000\068\000\072\000\053\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\054\000\156\000\157\000\008\000\055\000\160\000\158\000\
\056\000\080\000\081\000\082\000\083\000\084\000\161\000\162\000\
\046\000\080\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\001\000\030\000\
\081\000\018\000\144\000\075\000\067\000\063\000\042\000\105\000\
\093\000\094\000\146\000\000\000\000\000\000\000\000\000\142\000\
\000\000\000\000\047\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\000\000\
\059\000\003\000\000\000\000\000\000\000\000\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\000\000\044\000\000\000\074\000\059\000\
\059\000\000\000\000\000\000\000\000\000\059\000\059\000\059\000\
\059\000\059\000\000\000\059\000\059\000\000\000\035\000\059\000\
\003\000\003\000\003\000\059\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\045\000\000\000\000\000\073\000\035\000\035\000\000\000\
\000\000\000\000\006\000\035\000\035\000\035\000\035\000\035\000\
\037\000\035\000\035\000\000\000\000\000\035\000\037\000\037\000\
\000\000\035\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\050\000\000\000\000\000\000\000\037\000\
\037\000\006\000\006\000\006\000\011\000\037\000\037\000\037\000\
\037\000\037\000\038\000\037\000\037\000\000\000\000\000\037\000\
\038\000\038\000\000\000\037\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\051\000\000\000\000\000\
\007\000\038\000\038\000\011\000\011\000\011\000\000\000\038\000\
\038\000\038\000\038\000\038\000\042\000\038\000\038\000\000\000\
\000\000\038\000\048\000\000\000\000\000\038\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\007\000\
\007\000\007\000\012\000\042\000\042\000\000\000\000\000\049\000\
\000\000\042\000\042\000\042\000\042\000\042\000\043\000\042\000\
\042\000\000\000\000\000\042\000\000\000\000\000\000\000\042\000\
\056\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\000\000\000\000\008\000\043\000\043\000\000\000\
\000\000\055\000\000\000\043\000\043\000\043\000\043\000\043\000\
\046\000\043\000\043\000\000\000\000\000\043\000\000\000\000\000\
\000\000\043\000\065\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\008\000\008\000\008\000\000\000\046\000\
\046\000\000\000\000\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\047\000\046\000\046\000\000\000\000\000\046\000\
\000\000\000\000\000\000\046\000\000\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\060\000\000\000\
\000\000\047\000\047\000\000\000\000\000\000\000\000\000\047\000\
\047\000\047\000\047\000\047\000\044\000\047\000\047\000\000\000\
\000\000\047\000\000\000\000\000\000\000\047\000\000\000\000\000\
\000\000\044\000\044\000\000\000\000\000\044\000\044\000\000\000\
\000\000\000\000\000\000\044\000\044\000\000\000\000\000\000\000\
\000\000\044\000\044\000\044\000\044\000\044\000\000\000\044\000\
\044\000\045\000\000\000\044\000\000\000\000\000\000\000\044\000\
\000\000\000\000\000\000\000\000\000\000\000\000\045\000\045\000\
\000\000\000\000\045\000\045\000\000\000\000\000\000\000\000\000\
\045\000\045\000\000\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\050\000\045\000\045\000\000\000\000\000\
\045\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\050\000\000\000\000\000\
\000\000\000\000\050\000\050\000\000\000\000\000\000\000\000\000\
\050\000\050\000\050\000\050\000\050\000\051\000\050\000\050\000\
\000\000\000\000\050\000\000\000\000\000\000\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
\000\000\000\000\048\000\000\000\051\000\051\000\000\000\000\000\
\000\000\000\000\051\000\051\000\051\000\051\000\051\000\000\000\
\051\000\051\000\012\000\000\000\051\000\000\000\000\000\049\000\
\051\000\048\000\048\000\000\000\000\000\000\000\000\000\048\000\
\000\000\048\000\048\000\048\000\000\000\048\000\048\000\000\000\
\056\000\048\000\000\000\000\000\000\000\048\000\049\000\049\000\
\000\000\012\000\012\000\012\000\049\000\000\000\049\000\049\000\
\049\000\055\000\049\000\049\000\015\000\000\000\049\000\056\000\
\056\000\000\000\049\000\000\000\000\000\000\000\000\000\056\000\
\056\000\056\000\065\000\056\000\056\000\000\000\000\000\056\000\
\055\000\055\000\000\000\056\000\000\000\000\000\000\000\000\000\
\055\000\055\000\055\000\000\000\055\000\055\000\000\000\000\000\
\055\000\065\000\065\000\000\000\055\000\000\000\000\000\000\000\
\000\000\065\000\065\000\065\000\000\000\065\000\065\000\000\000\
\000\000\065\000\000\000\000\000\000\000\065\000\060\000\000\000\
\000\000\000\000\000\000\000\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
\060\000\000\000\000\000\000\000\000\000\060\000\060\000\000\000\
\000\000\000\000\000\000\060\000\060\000\060\000\060\000\060\000\
\000\000\060\000\060\000\000\000\000\000\060\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\000\094\000\000\000\
\000\000\000\000\000\000\100\000\059\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\059\000\000\000\000\000\000\000\074\000\059\000\059\000\000\000\
\000\000\000\000\000\000\059\000\059\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\000\000\000\000\000\000\000\000\099\000\000\000\
\000\000\000\000\000\000\000\000\093\000\094\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\093\000\094\000\080\000\
\081\000\082\000\083\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\094\000"

let yycheck = "\023\000\
\000\000\000\000\000\001\000\001\001\000\000\001\000\001\005\001\
\000\001\000\000\005\001\005\001\005\001\000\001\038\000\000\001\
\005\001\041\000\005\001\005\001\044\000\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\031\001\032\001\000\001\061\000\000\000\000\001\
\020\001\023\001\039\001\025\001\029\001\030\001\051\000\052\000\
\053\000\054\000\042\001\056\000\000\001\008\001\009\001\010\001\
\022\001\005\001\043\001\042\001\000\001\020\001\000\001\023\001\
\024\001\021\001\000\000\031\001\032\001\033\001\031\001\032\001\
\000\000\023\001\098\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\093\000\094\000\095\000\031\001\032\001\031\001\032\001\100\000\
\024\001\000\001\103\000\039\001\000\000\022\001\005\001\020\001\
\000\001\000\001\000\000\022\001\132\000\005\001\005\001\000\001\
\001\001\002\001\003\001\004\001\005\001\023\001\007\001\022\001\
\024\001\023\001\024\001\039\001\129\000\005\001\022\001\022\001\
\000\000\005\001\019\001\021\001\156\000\022\001\020\001\140\000\
\043\001\142\000\023\001\024\001\000\000\023\001\024\001\022\001\
\149\000\034\001\023\001\024\001\023\001\038\001\023\001\024\001\
\041\001\023\001\024\001\160\000\024\001\162\000\022\001\000\001\
\001\001\002\001\003\001\004\001\005\001\021\001\007\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\000\000\023\001\
\015\001\016\001\019\001\023\001\024\001\022\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\034\001\020\001\023\001\000\000\038\001\025\001\024\001\
\041\001\006\001\007\001\008\001\009\001\010\001\005\001\021\001\
\000\000\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\000\000\023\001\
\039\001\023\001\133\000\023\001\023\001\040\000\033\000\078\000\
\029\001\030\001\138\000\255\255\255\255\255\255\255\255\036\001\
\255\255\255\255\000\000\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\000\001\000\001\255\255\255\255\255\255\255\255\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\000\000\255\255\022\001\023\001\
\024\001\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\255\255\035\001\036\001\255\255\000\001\039\001\
\031\001\032\001\033\001\043\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\000\000\255\255\255\255\022\001\023\001\024\001\255\255\
\255\255\255\255\000\001\029\001\030\001\031\001\032\001\033\001\
\000\001\035\001\036\001\255\255\255\255\039\001\006\001\007\001\
\255\255\043\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\255\255\255\255\255\255\023\001\
\024\001\031\001\032\001\033\001\000\001\029\001\030\001\031\001\
\032\001\033\001\000\001\035\001\036\001\255\255\255\255\039\001\
\006\001\007\001\255\255\043\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\000\000\255\255\255\255\
\000\001\023\001\024\001\031\001\032\001\033\001\255\255\029\001\
\030\001\031\001\032\001\033\001\000\001\035\001\036\001\255\255\
\255\255\039\001\000\000\255\255\255\255\043\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\031\001\
\032\001\033\001\000\000\023\001\024\001\255\255\255\255\000\000\
\255\255\029\001\030\001\031\001\032\001\033\001\000\001\035\001\
\036\001\255\255\255\255\039\001\255\255\255\255\255\255\043\001\
\000\000\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\000\001\023\001\024\001\255\255\
\255\255\000\000\255\255\029\001\030\001\031\001\032\001\033\001\
\000\001\035\001\036\001\255\255\255\255\039\001\255\255\255\255\
\255\255\043\001\000\000\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\031\001\032\001\033\001\255\255\023\001\
\024\001\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\033\001\000\001\035\001\036\001\255\255\255\255\039\001\
\255\255\255\255\255\255\043\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\000\000\255\255\
\255\255\023\001\024\001\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\032\001\033\001\000\001\035\001\036\001\255\255\
\255\255\039\001\255\255\255\255\255\255\043\001\255\255\255\255\
\255\255\013\001\014\001\255\255\255\255\017\001\018\001\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\255\255\035\001\
\036\001\000\001\255\255\039\001\255\255\255\255\255\255\043\001\
\255\255\255\255\255\255\255\255\255\255\255\255\013\001\014\001\
\255\255\255\255\017\001\018\001\255\255\255\255\255\255\255\255\
\023\001\024\001\255\255\255\255\255\255\255\255\029\001\030\001\
\031\001\032\001\033\001\000\001\035\001\036\001\255\255\255\255\
\039\001\255\255\255\255\255\255\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\255\255\255\255\023\001\024\001\255\255\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\033\001\000\001\035\001\036\001\
\255\255\255\255\039\001\255\255\255\255\255\255\043\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\000\001\255\255\023\001\024\001\255\255\255\255\
\255\255\255\255\029\001\030\001\031\001\032\001\033\001\255\255\
\035\001\036\001\000\001\255\255\039\001\255\255\255\255\000\001\
\043\001\023\001\024\001\255\255\255\255\255\255\255\255\029\001\
\255\255\031\001\032\001\033\001\255\255\035\001\036\001\255\255\
\000\001\039\001\255\255\255\255\255\255\043\001\023\001\024\001\
\255\255\031\001\032\001\033\001\029\001\255\255\031\001\032\001\
\033\001\000\001\035\001\036\001\042\001\255\255\039\001\023\001\
\024\001\255\255\043\001\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\000\001\035\001\036\001\255\255\255\255\039\001\
\023\001\024\001\255\255\043\001\255\255\255\255\255\255\255\255\
\031\001\032\001\033\001\255\255\035\001\036\001\255\255\255\255\
\039\001\023\001\024\001\255\255\043\001\255\255\255\255\255\255\
\255\255\031\001\032\001\033\001\255\255\035\001\036\001\255\255\
\255\255\039\001\255\255\255\255\255\255\043\001\000\001\255\255\
\255\255\255\255\255\255\255\255\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\255\255\023\001\024\001\255\255\
\255\255\255\255\255\255\029\001\030\001\031\001\032\001\033\001\
\255\255\035\001\036\001\255\255\255\255\039\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\035\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\255\255\255\255\022\001\023\001\024\001\255\255\
\255\255\255\255\255\255\029\001\030\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\029\001\030\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\030\001"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  REM\000\
  LT\000\
  LE\000\
  EQ\000\
  NE\000\
  GE\000\
  GT\000\
  AND\000\
  OR\000\
  NOT\000\
  COLON\000\
  ASSIGN\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  ARROW\000\
  FATARROW\000\
  LBRACK\000\
  RBRACK\000\
  LCHAIN\000\
  RCHAIN\000\
  CONST\000\
  FUN\000\
  TYPE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  LET\000\
  IN\000\
  TEL\000\
  CASE\000\
  BAR\000\
  OF\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_module) in
    Obj.repr(
# 69 "src/parser/parser.mly"
               ( List.rev _1 )
# 526 "src/parser/parser.ml"
               : Ast.module_t))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "src/parser/parser.mly"
          ( _raise_error "module" )
# 532 "src/parser/parser.ml"
               : Ast.module_t))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "src/parser/parser.mly"
    ( [] )
# 538 "src/parser/parser.ml"
               : 'rev_module))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "src/parser/parser.mly"
        ( [] )
# 544 "src/parser/parser.ml"
               : 'rev_module))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rev_module) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'g_decl) in
    Obj.repr(
# 76 "src/parser/parser.mly"
                      ( _2 :: _1 )
# 552 "src/parser/parser.ml"
               : 'rev_module))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "src/parser/parser.mly"
          ( _raise_error "rev_expr" )
# 558 "src/parser/parser.ml"
               : 'rev_module))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "src/parser/parser.mly"
                                     ( GConstDecl (_2, _4, _6) )
# 567 "src/parser/parser.ml"
               : 'g_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typed_id_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'type_) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "src/parser/parser.mly"
                                                               ( 
    let (ids, types) = split_typed_ids _4 in 
    GFunDecl (_2, ids, (types @ [_7]), _9)
  )
# 580 "src/parser/parser.ml"
               : 'g_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_list) in
    Obj.repr(
# 88 "src/parser/parser.mly"
                             ( GTypeDecl (_2, _3) )
# 588 "src/parser/parser.ml"
               : 'g_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "src/parser/parser.mly"
          ( _raise_error "g_decl" )
# 594 "src/parser/parser.ml"
               : 'g_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_constructor_list) in
    Obj.repr(
# 93 "src/parser/parser.mly"
                         ( List.rev _1 )
# 601 "src/parser/parser.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "src/parser/parser.mly"
          ( _raise_error "constructor_list" )
# 607 "src/parser/parser.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructor) in
    Obj.repr(
# 98 "src/parser/parser.mly"
                    ( [_2] )
# 614 "src/parser/parser.ml"
               : 'rev_constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_constructor_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor) in
    Obj.repr(
# 99 "src/parser/parser.mly"
                                         ( _3 :: _1 )
# 622 "src/parser/parser.ml"
               : 'rev_constructor_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "src/parser/parser.mly"
          ( _raise_error "rev_constructor_list" )
# 628 "src/parser/parser.ml"
               : 'rev_constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_list_comma) in
    Obj.repr(
# 104 "src/parser/parser.mly"
                                     ( (_1, _3) )
# 636 "src/parser/parser.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "src/parser/parser.mly"
          ( _raise_error "constructor" )
# 642 "src/parser/parser.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_type_list_comma) in
    Obj.repr(
# 109 "src/parser/parser.mly"
                        ( List.rev _1 )
# 649 "src/parser/parser.ml"
               : 'type_list_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 110 "src/parser/parser.mly"
          ( _raise_error "type_list_comma" )
# 655 "src/parser/parser.ml"
               : 'type_list_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 114 "src/parser/parser.mly"
    ( [] )
# 661 "src/parser/parser.ml"
               : 'rev_type_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 115 "src/parser/parser.mly"
          ( [_1] )
# 668 "src/parser/parser.ml"
               : 'rev_type_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_type_list_comma) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 116 "src/parser/parser.mly"
                                    ( _3 :: _1 )
# 676 "src/parser/parser.ml"
               : 'rev_type_list_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "src/parser/parser.mly"
          ( _raise_error "rev_type_list_comma" )
# 682 "src/parser/parser.ml"
               : 'rev_type_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 121 "src/parser/parser.mly"
                   ( (_1, _3) )
# 690 "src/parser/parser.ml"
               : 'typed_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "src/parser/parser.mly"
          ( _raise_error "typed_id" )
# 696 "src/parser/parser.ml"
               : 'typed_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 126 "src/parser/parser.mly"
    ( [] )
# 702 "src/parser/parser.ml"
               : 'rev_typed_id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typed_id) in
    Obj.repr(
# 127 "src/parser/parser.mly"
             ( [_1] )
# 709 "src/parser/parser.ml"
               : 'rev_typed_id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_typed_id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typed_id) in
    Obj.repr(
# 128 "src/parser/parser.mly"
                                     ( _3 :: _1 )
# 717 "src/parser/parser.ml"
               : 'rev_typed_id_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "src/parser/parser.mly"
          ( _raise_error "rev_typed_id_list" )
# 723 "src/parser/parser.ml"
               : 'rev_typed_id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_typed_id_list) in
    Obj.repr(
# 133 "src/parser/parser.mly"
                      ( List.rev _1 )
# 730 "src/parser/parser.ml"
               : 'typed_id_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 134 "src/parser/parser.mly"
          ( _raise_error "typed_id_list" )
# 736 "src/parser/parser.ml"
               : 'typed_id_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "src/parser/parser.mly"
                                     ( ConstDecl (_2, _4, _6) )
# 745 "src/parser/parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typed_id_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'type_) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "src/parser/parser.mly"
                                                               ( 
    let (ids, types) = split_typed_ids _4 in 
    FunDecl (_2, ids, (types @ [_7]), _9)
  )
# 758 "src/parser/parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 145 "src/parser/parser.mly"
          ( _raise_error "decl" )
# 764 "src/parser/parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 152 "src/parser/parser.mly"
       ( Val (_1) )
# 771 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit) in
    Obj.repr(
# 153 "src/parser/parser.mly"
        ( Lit (_1) )
# 778 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "src/parser/parser.mly"
                  ( BinOp (_1, Add, _3) )
# 786 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "src/parser/parser.mly"
                  ( BinOp (_1, Sub, _3) )
# 794 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "src/parser/parser.mly"
                  ( BinOp (_1, Mul, _3) )
# 802 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "src/parser/parser.mly"
                  ( BinOp (_1, Div, _3) )
# 810 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "src/parser/parser.mly"
                  ( BinOp (_1, Rem, _3) )
# 818 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "src/parser/parser.mly"
                 ( BinOp (_1, Lt, _3) )
# 826 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "src/parser/parser.mly"
                 ( BinOp (_1, Le, _3) )
# 834 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "src/parser/parser.mly"
                 ( BinOp (_1, Eq, _3) )
# 842 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "src/parser/parser.mly"
                 ( BinOp (_1, Ne, _3) )
# 850 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "src/parser/parser.mly"
                 ( BinOp (_1, Ge, _3) )
# 858 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "src/parser/parser.mly"
                 ( BinOp (_1, Gt, _3) )
# 866 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "src/parser/parser.mly"
                     ( BinOp (_1, LChain, _3) )
# 874 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "src/parser/parser.mly"
                     ( BinOp (_1, RChain, _3) )
# 882 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "src/parser/parser.mly"
                  ( BinOp (_1, And, _3) )
# 890 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "src/parser/parser.mly"
                 ( BinOp (_1, Or, _3) )
# 898 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "src/parser/parser.mly"
                       ( UnOp (Neg, _2) )
# 905 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "src/parser/parser.mly"
             ( UnOp (Not, _2) )
# 912 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 177 "src/parser/parser.mly"
                       ( _2 )
# 919 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "src/parser/parser.mly"
                                                 ( If (_2, _4, _6) )
# 928 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 180 "src/parser/parser.mly"
                                  ( Let (_2, _4) )
# 936 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_match_list) in
    Obj.repr(
# 181 "src/parser/parser.mly"
                                            ( Case (_2, _3) )
# 944 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fun_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 183 "src/parser/parser.mly"
                                     ( Call (_1, _3) )
# 952 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "src/parser/parser.mly"
          ( _raise_error "expr" )
# 958 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_pattern_match_list) in
    Obj.repr(
# 188 "src/parser/parser.mly"
                           ( List.rev _1 )
# 965 "src/parser/parser.ml"
               : 'pattern_match_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 189 "src/parser/parser.mly"
          ( _raise_error "pattern_match_list" )
# 971 "src/parser/parser.ml"
               : 'pattern_match_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_match) in
    Obj.repr(
# 193 "src/parser/parser.mly"
                     ( [_2] )
# 978 "src/parser/parser.ml"
               : 'rev_pattern_match_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_pattern_match_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_match) in
    Obj.repr(
# 194 "src/parser/parser.mly"
                                            ( _3 :: _1 )
# 986 "src/parser/parser.ml"
               : 'rev_pattern_match_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 195 "src/parser/parser.mly"
          ( _raise_error "rev_pattern_match_list" )
# 992 "src/parser/parser.ml"
               : 'rev_pattern_match_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'name_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 199 "src/parser/parser.mly"
                                          ( ((_1, _3), _6) )
# 1001 "src/parser/parser.ml"
               : 'pattern_match))
; (fun __caml_parser_env ->
    Obj.repr(
# 200 "src/parser/parser.mly"
          ( _raise_error "pattern_match" )
# 1007 "src/parser/parser.ml"
               : 'pattern_match))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_name_list) in
    Obj.repr(
# 204 "src/parser/parser.mly"
                  ( List.rev _1 )
# 1014 "src/parser/parser.ml"
               : 'name_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 205 "src/parser/parser.mly"
          ( _raise_error "name_list" )
# 1020 "src/parser/parser.ml"
               : 'name_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 209 "src/parser/parser.mly"
    ( [] )
# 1026 "src/parser/parser.ml"
               : 'rev_name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 210 "src/parser/parser.mly"
       ( [_1] )
# 1033 "src/parser/parser.ml"
               : 'rev_name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_name_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 211 "src/parser/parser.mly"
                           ( _3 :: _1 )
# 1041 "src/parser/parser.ml"
               : 'rev_name_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "src/parser/parser.mly"
          ( _raise_error "rev_name_list" )
# 1047 "src/parser/parser.ml"
               : 'rev_name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 216 "src/parser/parser.mly"
       ( Val (_1) )
# 1054 "src/parser/parser.ml"
               : 'fun_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 223 "src/parser/parser.mly"
          ( _raise_error "fun_expr" )
# 1060 "src/parser/parser.ml"
               : 'fun_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_expr_list) in
    Obj.repr(
# 227 "src/parser/parser.mly"
                  ( List.rev _1 )
# 1067 "src/parser/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 228 "src/parser/parser.mly"
          ( _raise_error "expr_list" )
# 1073 "src/parser/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "src/parser/parser.mly"
    ( [] )
# 1079 "src/parser/parser.ml"
               : 'rev_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 233 "src/parser/parser.mly"
         ( [_1] )
# 1086 "src/parser/parser.ml"
               : 'rev_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 234 "src/parser/parser.mly"
                             ( _3 :: _1 )
# 1094 "src/parser/parser.ml"
               : 'rev_expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 235 "src/parser/parser.mly"
          ( _raise_error "rev_expr_list" )
# 1100 "src/parser/parser.ml"
               : 'rev_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_decls) in
    Obj.repr(
# 239 "src/parser/parser.mly"
              ( List.rev _1 )
# 1107 "src/parser/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "src/parser/parser.mly"
          ( _raise_error "decls" )
# 1113 "src/parser/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 244 "src/parser/parser.mly"
         ( [_1] )
# 1120 "src/parser/parser.ml"
               : 'rev_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rev_decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 245 "src/parser/parser.mly"
                   ( _2 :: _1 )
# 1128 "src/parser/parser.ml"
               : 'rev_decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 246 "src/parser/parser.mly"
          ( _raise_error "rev_decls" )
# 1134 "src/parser/parser.ml"
               : 'rev_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 252 "src/parser/parser.mly"
        ( Int (_1) )
# 1141 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 253 "src/parser/parser.mly"
          ( Float (_1) )
# 1148 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 254 "src/parser/parser.mly"
         ( Bool (_1) )
# 1155 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 255 "src/parser/parser.mly"
           ( String (_1) )
# 1162 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "src/parser/parser.mly"
          ( _raise_error "lit" )
# 1168 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 262 "src/parser/parser.mly"
       ( parse_type _1 )
# 1175 "src/parser/parser.ml"
               : 'type_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rev_type_list_arrow) in
    Obj.repr(
# 263 "src/parser/parser.mly"
                                      ( FunT (List.rev _2) )
# 1182 "src/parser/parser.ml"
               : 'type_))
; (fun __caml_parser_env ->
    Obj.repr(
# 264 "src/parser/parser.mly"
          ( _raise_error "type" )
# 1188 "src/parser/parser.ml"
               : 'type_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 268 "src/parser/parser.mly"
          ( [_1] )
# 1195 "src/parser/parser.ml"
               : 'rev_type_list_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_type_list_arrow) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 269 "src/parser/parser.mly"
                                    ( _3 :: _1 )
# 1203 "src/parser/parser.ml"
               : 'rev_type_list_arrow))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "src/parser/parser.mly"
          ( _raise_error "rev_type_list_arrow" )
# 1209 "src/parser/parser.ml"
               : 'rev_type_list_arrow))
(* Entry module_ *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let module_ (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.module_t)
