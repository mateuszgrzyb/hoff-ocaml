type token =
  | INT of (int)
  | FLOAT of (float)
  | BOOL of (bool)
  | STRING of (string)
  | ID of (string)
  | ADD
  | SUB
  | MUL
  | DIV
  | REM
  | LT
  | LE
  | EQ
  | NE
  | GE
  | GT
  | AND
  | OR
  | NOT
  | COLON
  | ASSIGN
  | LPAREN
  | RPAREN
  | COMMA
  | ARROW
  | FATARROW
  | CONST
  | FUN
  | TYPE
  | IF
  | THEN
  | ELSE
  | FI
  | LET
  | IN
  | TEL
  | CASE
  | BAR
  | OF
  | EOF

open Parsing;;
let _ = parse_error;;
# 3 "src/parser/parser.mly"
  open Ast
  open Errors
  open Printf

  let rec split_typed_ids tids =
    match tids with
    | [] -> ([], [])
    | (i, t) :: xs -> 
    let (is, ts) = split_typed_ids xs in 
    (i :: is, t :: ts) 

  let _raise_error (msg: string) = 
    let error_pos = get_pos (Parsing.symbol_start_pos ()) in
    raise (ParsingError (sprintf "%s | ln: %d | col: %d \n" msg error_pos.ln error_pos.col))

# 62 "src/parser/parser.ml"
let yytransl_const = [|
  262 (* ADD *);
  263 (* SUB *);
  264 (* MUL *);
  265 (* DIV *);
  266 (* REM *);
  267 (* LT *);
  268 (* LE *);
  269 (* EQ *);
  270 (* NE *);
  271 (* GE *);
  272 (* GT *);
  273 (* AND *);
  274 (* OR *);
  275 (* NOT *);
  276 (* COLON *);
  277 (* ASSIGN *);
  278 (* LPAREN *);
  279 (* RPAREN *);
  280 (* COMMA *);
  281 (* ARROW *);
  282 (* FATARROW *);
  283 (* CONST *);
  284 (* FUN *);
  285 (* TYPE *);
  286 (* IF *);
  287 (* THEN *);
  288 (* ELSE *);
  289 (* FI *);
  290 (* LET *);
  291 (* IN *);
  292 (* TEL *);
  293 (* CASE *);
  294 (* BAR *);
  295 (* OF *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* STRING *);
  261 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\002\000\002\000\002\000\002\000\003\000\003\000\
\003\000\003\000\007\000\007\000\008\000\008\000\008\000\009\000\
\009\000\010\000\010\000\011\000\011\000\011\000\011\000\012\000\
\012\000\013\000\013\000\013\000\013\000\006\000\006\000\014\000\
\014\000\014\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\017\000\017\000\020\000\020\000\020\000\021\000\021\000\
\022\000\022\000\023\000\023\000\023\000\023\000\018\000\018\000\
\019\000\019\000\024\000\024\000\024\000\024\000\016\000\016\000\
\025\000\025\000\025\000\015\000\015\000\015\000\015\000\015\000\
\004\000\004\000\004\000\026\000\026\000\026\000\000\000"

let yylen = "\002\000\
\001\000\001\000\000\000\001\000\002\000\001\000\006\000\009\000\
\003\000\001\000\001\000\001\000\002\000\003\000\001\000\004\000\
\001\000\001\000\001\000\000\000\001\000\003\000\001\000\003\000\
\001\000\000\000\001\000\003\000\001\000\001\000\001\000\006\000\
\009\000\001\000\001\000\001\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\006\000\004\000\003\000\004\000\
\001\000\001\000\001\000\002\000\003\000\001\000\006\000\001\000\
\001\000\001\000\000\000\001\000\003\000\001\000\001\000\001\000\
\001\000\001\000\000\000\001\000\003\000\001\000\001\000\001\000\
\001\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\003\000\001\000\001\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\004\000\095\000\000\000\010\000\000\000\
\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\000\000\091\000\089\000\000\000\000\000\
\025\000\000\000\000\000\027\000\000\000\017\000\000\000\013\000\
\000\000\091\000\092\000\000\000\000\000\000\000\000\000\000\000\
\000\000\014\000\090\000\000\000\000\000\084\000\085\000\086\000\
\087\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\000\000\024\000\000\000\025\000\028\000\000\000\
\021\000\000\000\000\000\093\000\050\000\051\000\000\000\000\000\
\034\000\000\000\000\000\081\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\
\052\000\000\000\000\000\000\000\000\000\034\000\082\000\059\000\
\000\000\055\000\000\000\000\000\000\000\039\000\040\000\041\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\000\000\000\000\064\000\000\000\060\000\000\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\061\000\000\000\000\000\
\000\000\000\000\000\000\068\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\069\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\005\000\006\000\011\000\024\000\057\000\027\000\019\000\020\000\
\032\000\066\000\067\000\028\000\029\000\076\000\058\000\077\000\
\106\000\059\000\123\000\107\000\133\000\149\000\150\000\124\000\
\078\000\036\000"

let yysindex = "\003\000\
\002\000\000\000\000\000\000\000\000\000\080\255\000\000\012\255\
\015\255\035\255\000\000\031\255\034\255\003\255\048\255\005\255\
\000\000\006\255\000\000\022\255\000\000\000\000\091\255\054\255\
\000\000\043\255\075\255\000\000\047\255\000\000\082\255\000\000\
\006\255\000\000\000\000\029\255\042\255\048\255\086\255\007\255\
\094\255\000\000\000\000\048\255\000\000\000\000\000\000\000\000\
\000\000\000\000\042\255\042\255\042\255\042\255\009\255\042\255\
\169\001\000\000\088\255\000\000\048\255\000\000\000\000\000\000\
\000\000\089\255\090\255\000\000\000\000\000\000\230\255\180\255\
\000\000\119\255\123\255\000\000\117\255\050\255\016\255\042\255\
\042\255\042\255\042\255\042\255\042\255\042\255\042\255\042\255\
\042\255\042\255\042\255\042\255\081\255\132\255\000\000\048\255\
\000\000\042\255\134\255\154\255\042\255\000\000\000\000\000\000\
\008\255\000\000\141\255\049\255\049\255\000\000\000\000\000\000\
\113\255\113\255\163\255\163\255\113\255\113\255\193\255\129\255\
\000\000\169\001\158\255\159\255\042\255\000\000\150\255\048\255\
\005\255\169\001\000\000\162\255\000\000\008\255\000\000\042\255\
\169\001\042\255\189\255\190\255\014\255\000\000\169\001\169\001\
\042\255\192\255\000\000\000\000\191\255\205\255\169\001\048\255\
\206\255\225\255\228\255\042\255\000\000\042\255\169\001\169\001"

let yyrindex = "\000\000\
\134\000\000\000\087\000\000\000\000\000\250\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\255\
\020\001\000\000\000\000\117\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\229\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\069\255\000\000\000\000\000\000\001\000\000\000\000\000\000\000\
\000\000\035\000\000\000\000\000\000\000\000\000\000\000\000\000\
\147\000\000\000\000\000\000\000\000\000\000\000\000\000\078\255\
\000\000\000\000\231\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\216\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\103\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\133\001\065\000\095\000\000\000\000\000\000\000\
\125\000\155\000\235\000\255\000\185\000\215\000\037\001\056\001\
\210\255\107\255\000\000\236\255\000\000\000\000\000\000\000\000\
\045\255\073\001\000\000\000\000\000\000\000\000\000\000\000\000\
\177\000\000\000\000\000\000\000\109\255\000\000\125\255\086\001\
\000\000\000\000\127\255\000\000\000\000\237\255\039\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\099\001\062\255"

let yygindex = "\000\000\
\000\000\000\000\000\000\233\255\118\002\127\000\000\000\000\000\
\228\000\000\000\000\000\222\000\000\000\199\000\000\000\000\000\
\000\000\000\000\000\000\000\000\144\000\000\000\000\000\000\000\
\000\000\000\000"

let yytablesize = 788
let yytable = "\035\000\
\057\000\004\000\017\000\001\000\025\000\030\000\062\000\131\000\
\073\000\026\000\031\000\026\000\132\000\147\000\060\000\104\000\
\012\000\065\000\148\000\013\000\068\000\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\035\000\074\000\075\000\094\000\032\000\014\000\
\018\000\045\000\046\000\047\000\048\000\049\000\050\000\021\000\
\051\000\102\000\015\000\043\000\022\000\044\000\105\000\016\000\
\082\000\083\000\084\000\033\000\052\000\033\000\038\000\053\000\
\037\000\032\000\032\000\026\000\026\000\023\000\040\000\054\000\
\126\000\032\000\037\000\055\000\074\000\075\000\056\000\007\000\
\121\000\046\000\047\000\048\000\049\000\050\000\002\000\051\000\
\033\000\033\000\034\000\020\000\020\000\064\000\038\000\022\000\
\033\000\039\000\022\000\052\000\019\000\023\000\053\000\041\000\
\139\000\061\000\008\000\009\000\010\000\093\000\054\000\095\000\
\023\000\096\000\055\000\023\000\011\000\056\000\080\000\081\000\
\082\000\083\000\084\000\099\000\042\000\075\000\075\000\100\000\
\155\000\076\000\076\000\067\000\067\000\003\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\007\000\077\000\077\000\066\000\070\000\101\000\
\125\000\128\000\043\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\080\000\081\000\082\000\083\000\084\000\085\000\086\000\129\000\
\008\000\089\000\090\000\134\000\135\000\138\000\136\000\141\000\
\046\000\080\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\145\000\098\000\152\000\146\000\153\000\047\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\154\000\157\000\156\000\072\000\
\057\000\057\000\044\000\080\000\081\000\082\000\083\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\158\000\001\000\079\000\030\000\097\000\018\000\045\000\140\000\
\057\000\003\000\073\000\065\000\042\000\063\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\057\000\057\000\057\000\012\000\103\000\142\000\072\000\057\000\
\057\000\000\000\000\000\057\000\057\000\057\000\000\000\057\000\
\057\000\000\000\035\000\057\000\048\000\000\000\000\000\057\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\000\000\000\000\049\000\
\071\000\035\000\035\000\000\000\000\000\035\000\035\000\035\000\
\037\000\035\000\035\000\000\000\000\000\035\000\037\000\037\000\
\054\000\035\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\000\000\000\000\053\000\006\000\037\000\
\037\000\000\000\000\000\037\000\037\000\037\000\038\000\037\000\
\037\000\000\000\063\000\037\000\038\000\038\000\000\000\037\000\
\000\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\006\000\006\000\006\000\011\000\038\000\038\000\000\000\
\000\000\038\000\038\000\038\000\042\000\038\000\038\000\000\000\
\000\000\038\000\000\000\000\000\058\000\038\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\011\000\
\011\000\011\000\007\000\042\000\042\000\000\000\000\000\042\000\
\042\000\042\000\043\000\042\000\042\000\000\000\000\000\042\000\
\003\000\003\000\003\000\042\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\007\000\007\000\007\000\
\008\000\043\000\043\000\000\000\000\000\043\000\043\000\043\000\
\046\000\043\000\043\000\000\000\000\000\043\000\000\000\000\000\
\000\000\043\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\008\000\008\000\008\000\000\000\046\000\
\046\000\000\000\000\000\046\000\046\000\046\000\047\000\046\000\
\046\000\000\000\000\000\046\000\000\000\000\000\000\000\046\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\000\000\044\000\000\000\000\000\047\000\047\000\000\000\
\000\000\047\000\047\000\047\000\000\000\047\000\047\000\044\000\
\044\000\047\000\000\000\044\000\044\000\047\000\045\000\000\000\
\000\000\044\000\044\000\000\000\000\000\044\000\044\000\044\000\
\000\000\044\000\044\000\045\000\045\000\044\000\000\000\045\000\
\045\000\044\000\000\000\012\000\000\000\045\000\045\000\000\000\
\000\000\045\000\045\000\045\000\000\000\045\000\045\000\000\000\
\000\000\045\000\000\000\000\000\048\000\045\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\012\000\
\012\000\000\000\000\000\000\000\000\000\048\000\048\000\049\000\
\000\000\015\000\000\000\048\000\048\000\000\000\000\000\048\000\
\048\000\048\000\000\000\048\000\048\000\000\000\000\000\048\000\
\054\000\049\000\000\000\048\000\000\000\000\000\049\000\049\000\
\000\000\000\000\049\000\049\000\049\000\053\000\049\000\049\000\
\000\000\000\000\049\000\000\000\000\000\000\000\049\000\054\000\
\054\000\000\000\063\000\054\000\054\000\054\000\000\000\054\000\
\054\000\000\000\000\000\054\000\053\000\053\000\000\000\054\000\
\053\000\053\000\053\000\000\000\053\000\053\000\000\000\000\000\
\053\000\063\000\063\000\000\000\053\000\063\000\063\000\063\000\
\000\000\063\000\063\000\000\000\058\000\063\000\000\000\000\000\
\000\000\063\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\000\000\
\000\000\000\000\000\000\058\000\058\000\000\000\000\000\058\000\
\058\000\058\000\000\000\058\000\058\000\000\000\000\000\058\000\
\069\000\070\000\071\000\072\000\000\000\079\000\080\000\081\000\
\082\000\083\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\108\000\109\000\110\000\
\111\000\112\000\113\000\114\000\115\000\116\000\117\000\118\000\
\119\000\120\000\122\000\000\000\000\000\000\000\000\000\127\000\
\000\000\000\000\130\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\137\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\143\000\000\000\144\000\
\000\000\000\000\000\000\000\000\000\000\000\000\151\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\159\000\000\000\160\000"

let yycheck = "\023\000\
\000\000\000\000\000\001\001\000\000\001\000\001\000\001\000\001\
\000\001\005\001\005\001\005\001\005\001\000\001\038\000\000\001\
\005\001\041\000\005\001\005\001\044\000\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\018\001\000\000\027\001\028\001\061\000\000\001\005\001\
\038\001\000\001\001\001\002\001\003\001\004\001\005\001\000\001\
\007\001\000\001\020\001\023\001\005\001\025\001\039\001\022\001\
\008\001\009\001\010\001\038\001\019\001\000\001\020\001\022\001\
\000\000\027\001\028\001\023\001\024\001\022\001\024\001\030\001\
\096\000\035\001\021\001\034\001\027\001\028\001\037\001\000\001\
\000\001\001\001\002\001\003\001\004\001\005\001\000\000\007\001\
\027\001\028\001\000\001\023\001\024\001\000\001\000\000\005\001\
\035\001\023\001\005\001\019\001\023\001\024\001\022\001\022\001\
\128\000\020\001\027\001\028\001\029\001\022\001\030\001\023\001\
\022\001\024\001\034\001\022\001\000\000\037\001\006\001\007\001\
\008\001\009\001\010\001\005\001\000\000\023\001\024\001\005\001\
\152\000\023\001\024\001\023\001\024\001\000\000\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\023\001\024\001\023\001\024\001\035\001\
\021\001\020\001\000\000\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\022\001\
\000\000\015\001\016\001\039\001\023\001\032\001\024\001\022\001\
\000\000\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\021\001\031\001\020\001\023\001\023\001\000\000\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\024\001\005\001\025\001\022\001\
\023\001\024\001\000\000\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\018\001\
\021\001\000\000\035\001\023\001\023\001\023\001\000\000\129\000\
\000\001\000\001\023\001\023\001\033\000\040\000\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\000\000\078\000\134\000\022\001\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\255\255\031\001\
\032\001\255\255\000\001\035\001\000\000\255\255\255\255\039\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\000\000\
\022\001\023\001\024\001\255\255\255\255\027\001\028\001\029\001\
\000\001\031\001\032\001\255\255\255\255\035\001\006\001\007\001\
\000\000\039\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\000\000\000\001\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\000\001\031\001\
\032\001\255\255\000\000\035\001\006\001\007\001\255\255\039\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\027\001\028\001\029\001\000\001\023\001\024\001\255\255\
\255\255\027\001\028\001\029\001\000\001\031\001\032\001\255\255\
\255\255\035\001\255\255\255\255\000\000\039\001\255\255\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\027\001\
\028\001\029\001\000\001\023\001\024\001\255\255\255\255\027\001\
\028\001\029\001\000\001\031\001\032\001\255\255\255\255\035\001\
\027\001\028\001\029\001\039\001\255\255\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\018\001\027\001\028\001\029\001\
\000\001\023\001\024\001\255\255\255\255\027\001\028\001\029\001\
\000\001\031\001\032\001\255\255\255\255\035\001\255\255\255\255\
\255\255\039\001\255\255\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\027\001\028\001\029\001\255\255\023\001\
\024\001\255\255\255\255\027\001\028\001\029\001\000\001\031\001\
\032\001\255\255\255\255\035\001\255\255\255\255\255\255\039\001\
\255\255\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\255\255\000\001\255\255\255\255\023\001\024\001\255\255\
\255\255\027\001\028\001\029\001\255\255\031\001\032\001\013\001\
\014\001\035\001\255\255\017\001\018\001\039\001\000\001\255\255\
\255\255\023\001\024\001\255\255\255\255\027\001\028\001\029\001\
\255\255\031\001\032\001\013\001\014\001\035\001\255\255\017\001\
\018\001\039\001\255\255\000\001\255\255\023\001\024\001\255\255\
\255\255\027\001\028\001\029\001\255\255\031\001\032\001\255\255\
\255\255\035\001\255\255\255\255\000\001\039\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\029\001\255\255\255\255\255\255\255\255\017\001\018\001\000\001\
\255\255\038\001\255\255\023\001\024\001\255\255\255\255\027\001\
\028\001\029\001\255\255\031\001\032\001\255\255\255\255\035\001\
\000\001\018\001\255\255\039\001\255\255\255\255\023\001\024\001\
\255\255\255\255\027\001\028\001\029\001\000\001\031\001\032\001\
\255\255\255\255\035\001\255\255\255\255\255\255\039\001\023\001\
\024\001\255\255\000\001\027\001\028\001\029\001\255\255\031\001\
\032\001\255\255\255\255\035\001\023\001\024\001\255\255\039\001\
\027\001\028\001\029\001\255\255\031\001\032\001\255\255\255\255\
\035\001\023\001\024\001\255\255\039\001\027\001\028\001\029\001\
\255\255\031\001\032\001\255\255\000\001\035\001\255\255\255\255\
\255\255\039\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\255\255\
\255\255\255\255\255\255\023\001\024\001\255\255\255\255\027\001\
\028\001\029\001\255\255\031\001\032\001\255\255\255\255\035\001\
\051\000\052\000\053\000\054\000\255\255\056\000\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\080\000\081\000\082\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\255\255\255\255\255\255\255\255\098\000\
\255\255\255\255\101\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\125\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\136\000\255\255\138\000\
\255\255\255\255\255\255\255\255\255\255\255\255\145\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\156\000\255\255\158\000"

let yynames_const = "\
  ADD\000\
  SUB\000\
  MUL\000\
  DIV\000\
  REM\000\
  LT\000\
  LE\000\
  EQ\000\
  NE\000\
  GE\000\
  GT\000\
  AND\000\
  OR\000\
  NOT\000\
  COLON\000\
  ASSIGN\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  ARROW\000\
  FATARROW\000\
  CONST\000\
  FUN\000\
  TYPE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  FI\000\
  LET\000\
  IN\000\
  TEL\000\
  CASE\000\
  BAR\000\
  OF\000\
  EOF\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  STRING\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_module) in
    Obj.repr(
# 64 "src/parser/parser.mly"
               ( List.rev _1 )
# 471 "src/parser/parser.ml"
               : Ast.module_t))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "src/parser/parser.mly"
          ( _raise_error "module" )
# 477 "src/parser/parser.ml"
               : Ast.module_t))
; (fun __caml_parser_env ->
    Obj.repr(
# 69 "src/parser/parser.mly"
    ( [] )
# 483 "src/parser/parser.ml"
               : 'rev_module))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "src/parser/parser.mly"
        ( [] )
# 489 "src/parser/parser.ml"
               : 'rev_module))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rev_module) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'g_decl) in
    Obj.repr(
# 71 "src/parser/parser.mly"
                      ( _2 :: _1 )
# 497 "src/parser/parser.ml"
               : 'rev_module))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "src/parser/parser.mly"
          ( _raise_error "rev_expr" )
# 503 "src/parser/parser.ml"
               : 'rev_module))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "src/parser/parser.mly"
                                     ( GConstDecl (_2, _4, _6) )
# 512 "src/parser/parser.ml"
               : 'g_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typed_id_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'type_) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "src/parser/parser.mly"
                                                               ( 
    let (ids, types) = split_typed_ids _4 in 
    GFunDecl (_2, ids, (types @ [_7]), _9)
  )
# 525 "src/parser/parser.ml"
               : 'g_decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor_list) in
    Obj.repr(
# 83 "src/parser/parser.mly"
                             ( GTypeDecl (_2, _3) )
# 533 "src/parser/parser.ml"
               : 'g_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "src/parser/parser.mly"
          ( _raise_error "g_decl" )
# 539 "src/parser/parser.ml"
               : 'g_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_constructor_list) in
    Obj.repr(
# 88 "src/parser/parser.mly"
                         ( List.rev _1 )
# 546 "src/parser/parser.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "src/parser/parser.mly"
          ( _raise_error "constructor_list" )
# 552 "src/parser/parser.ml"
               : 'constructor_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constructor) in
    Obj.repr(
# 93 "src/parser/parser.mly"
                    ( [_2] )
# 559 "src/parser/parser.ml"
               : 'rev_constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_constructor_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constructor) in
    Obj.repr(
# 94 "src/parser/parser.mly"
                                         ( _3 :: _1 )
# 567 "src/parser/parser.ml"
               : 'rev_constructor_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 95 "src/parser/parser.mly"
          ( _raise_error "rev_constructor_list" )
# 573 "src/parser/parser.ml"
               : 'rev_constructor_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'type_list_comma) in
    Obj.repr(
# 99 "src/parser/parser.mly"
                                     ( (_1, _3) )
# 581 "src/parser/parser.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    Obj.repr(
# 100 "src/parser/parser.mly"
          ( _raise_error "constructor" )
# 587 "src/parser/parser.ml"
               : 'constructor))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_type_list_comma) in
    Obj.repr(
# 104 "src/parser/parser.mly"
                        ( List.rev _1 )
# 594 "src/parser/parser.ml"
               : 'type_list_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "src/parser/parser.mly"
          ( _raise_error "type_list_comma" )
# 600 "src/parser/parser.ml"
               : 'type_list_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "src/parser/parser.mly"
    ( [] )
# 606 "src/parser/parser.ml"
               : 'rev_type_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 110 "src/parser/parser.mly"
          ( [_1] )
# 613 "src/parser/parser.ml"
               : 'rev_type_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_type_list_comma) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 111 "src/parser/parser.mly"
                                    ( _3 :: _1 )
# 621 "src/parser/parser.ml"
               : 'rev_type_list_comma))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "src/parser/parser.mly"
          ( _raise_error "rev_type_list_comma" )
# 627 "src/parser/parser.ml"
               : 'rev_type_list_comma))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 116 "src/parser/parser.mly"
                   ( (_1, _3) )
# 635 "src/parser/parser.ml"
               : 'typed_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "src/parser/parser.mly"
          ( _raise_error "typed_id" )
# 641 "src/parser/parser.ml"
               : 'typed_id))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "src/parser/parser.mly"
    ( [] )
# 647 "src/parser/parser.ml"
               : 'rev_typed_id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typed_id) in
    Obj.repr(
# 122 "src/parser/parser.mly"
             ( [_1] )
# 654 "src/parser/parser.ml"
               : 'rev_typed_id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_typed_id_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typed_id) in
    Obj.repr(
# 123 "src/parser/parser.mly"
                                     ( _3 :: _1 )
# 662 "src/parser/parser.ml"
               : 'rev_typed_id_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "src/parser/parser.mly"
          ( _raise_error "rev_typed_id_list" )
# 668 "src/parser/parser.ml"
               : 'rev_typed_id_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_typed_id_list) in
    Obj.repr(
# 128 "src/parser/parser.mly"
                      ( List.rev _1 )
# 675 "src/parser/parser.ml"
               : 'typed_id_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "src/parser/parser.mly"
          ( _raise_error "typed_id_list" )
# 681 "src/parser/parser.ml"
               : 'typed_id_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "src/parser/parser.mly"
                                     ( ConstDecl (_2, _4, _6) )
# 690 "src/parser/parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'typed_id_list) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'type_) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "src/parser/parser.mly"
                                                               ( 
    let (ids, types) = split_typed_ids _4 in 
    FunDecl (_2, ids, (types @ [_7]), _9)
  )
# 703 "src/parser/parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 140 "src/parser/parser.mly"
          ( _raise_error "decl" )
# 709 "src/parser/parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 147 "src/parser/parser.mly"
       ( Val (_1) )
# 716 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lit) in
    Obj.repr(
# 148 "src/parser/parser.mly"
        ( Lit (_1) )
# 723 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 150 "src/parser/parser.mly"
                  ( BinOp (_1, Add, _3) )
# 731 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 151 "src/parser/parser.mly"
                  ( BinOp (_1, Sub, _3) )
# 739 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 152 "src/parser/parser.mly"
                  ( BinOp (_1, Mul, _3) )
# 747 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "src/parser/parser.mly"
                  ( BinOp (_1, Div, _3) )
# 755 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "src/parser/parser.mly"
                  ( BinOp (_1, Rem, _3) )
# 763 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "src/parser/parser.mly"
                 ( BinOp (_1, Lt, _3) )
# 771 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "src/parser/parser.mly"
                 ( BinOp (_1, Le, _3) )
# 779 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "src/parser/parser.mly"
                 ( BinOp (_1, Eq, _3) )
# 787 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "src/parser/parser.mly"
                 ( BinOp (_1, Ne, _3) )
# 795 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "src/parser/parser.mly"
                 ( BinOp (_1, Ge, _3) )
# 803 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "src/parser/parser.mly"
                 ( BinOp (_1, Gt, _3) )
# 811 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "src/parser/parser.mly"
                  ( BinOp (_1, And, _3) )
# 819 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "src/parser/parser.mly"
                 ( BinOp (_1, Or, _3) )
# 827 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "src/parser/parser.mly"
                       ( UnOp (Neg, _2) )
# 834 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "src/parser/parser.mly"
             ( UnOp (Not, _2) )
# 841 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 169 "src/parser/parser.mly"
                       ( _2 )
# 848 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "src/parser/parser.mly"
                                                 ( If (_2, _4, _6) )
# 857 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'decls) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "src/parser/parser.mly"
                                  ( Let (_2, _4) )
# 865 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_match_list) in
    Obj.repr(
# 173 "src/parser/parser.mly"
                                            ( Case (_2, _3) )
# 873 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'fun_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_list) in
    Obj.repr(
# 175 "src/parser/parser.mly"
                                     ( Call (_1, _3) )
# 881 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 176 "src/parser/parser.mly"
          ( _raise_error "expr" )
# 887 "src/parser/parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_pattern_match_list) in
    Obj.repr(
# 180 "src/parser/parser.mly"
                           ( List.rev _1 )
# 894 "src/parser/parser.ml"
               : 'pattern_match_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 181 "src/parser/parser.mly"
          ( _raise_error "pattern_match_list" )
# 900 "src/parser/parser.ml"
               : 'pattern_match_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_match) in
    Obj.repr(
# 185 "src/parser/parser.mly"
                     ( [_2] )
# 907 "src/parser/parser.ml"
               : 'rev_pattern_match_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_pattern_match_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern_match) in
    Obj.repr(
# 186 "src/parser/parser.mly"
                                            ( _3 :: _1 )
# 915 "src/parser/parser.ml"
               : 'rev_pattern_match_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "src/parser/parser.mly"
          ( _raise_error "rev_pattern_match_list" )
# 921 "src/parser/parser.ml"
               : 'rev_pattern_match_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'name_list) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "src/parser/parser.mly"
                                          ( ((_1, _3), _6) )
# 930 "src/parser/parser.ml"
               : 'pattern_match))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "src/parser/parser.mly"
          ( _raise_error "pattern_match" )
# 936 "src/parser/parser.ml"
               : 'pattern_match))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_name_list) in
    Obj.repr(
# 196 "src/parser/parser.mly"
                  ( List.rev _1 )
# 943 "src/parser/parser.ml"
               : 'name_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 197 "src/parser/parser.mly"
          ( _raise_error "name_list" )
# 949 "src/parser/parser.ml"
               : 'name_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 201 "src/parser/parser.mly"
    ( [] )
# 955 "src/parser/parser.ml"
               : 'rev_name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 202 "src/parser/parser.mly"
       ( [_1] )
# 962 "src/parser/parser.ml"
               : 'rev_name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_name_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 203 "src/parser/parser.mly"
                           ( _3 :: _1 )
# 970 "src/parser/parser.ml"
               : 'rev_name_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 204 "src/parser/parser.mly"
          ( _raise_error "rev_name_list" )
# 976 "src/parser/parser.ml"
               : 'rev_name_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 208 "src/parser/parser.mly"
       ( Val (_1) )
# 983 "src/parser/parser.ml"
               : 'fun_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 215 "src/parser/parser.mly"
          ( _raise_error "fun_expr" )
# 989 "src/parser/parser.ml"
               : 'fun_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_expr_list) in
    Obj.repr(
# 219 "src/parser/parser.mly"
                  ( List.rev _1 )
# 996 "src/parser/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 220 "src/parser/parser.mly"
          ( _raise_error "expr_list" )
# 1002 "src/parser/parser.ml"
               : 'expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 224 "src/parser/parser.mly"
    ( [] )
# 1008 "src/parser/parser.ml"
               : 'rev_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 225 "src/parser/parser.mly"
         ( [_1] )
# 1015 "src/parser/parser.ml"
               : 'rev_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 226 "src/parser/parser.mly"
                             ( _3 :: _1 )
# 1023 "src/parser/parser.ml"
               : 'rev_expr_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 227 "src/parser/parser.mly"
          ( _raise_error "rev_expr_list" )
# 1029 "src/parser/parser.ml"
               : 'rev_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'rev_decls) in
    Obj.repr(
# 231 "src/parser/parser.mly"
              ( List.rev _1 )
# 1036 "src/parser/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 232 "src/parser/parser.mly"
          ( _raise_error "decls" )
# 1042 "src/parser/parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 236 "src/parser/parser.mly"
         ( [_1] )
# 1049 "src/parser/parser.ml"
               : 'rev_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'rev_decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 237 "src/parser/parser.mly"
                   ( _2 :: _1 )
# 1057 "src/parser/parser.ml"
               : 'rev_decls))
; (fun __caml_parser_env ->
    Obj.repr(
# 238 "src/parser/parser.mly"
          ( _raise_error "rev_decls" )
# 1063 "src/parser/parser.ml"
               : 'rev_decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 244 "src/parser/parser.mly"
        ( Int (_1) )
# 1070 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 245 "src/parser/parser.mly"
          ( Float (_1) )
# 1077 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 246 "src/parser/parser.mly"
         ( Bool (_1) )
# 1084 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 247 "src/parser/parser.mly"
           ( String (_1) )
# 1091 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    Obj.repr(
# 248 "src/parser/parser.mly"
          ( _raise_error "lit" )
# 1097 "src/parser/parser.ml"
               : 'lit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 254 "src/parser/parser.mly"
       ( parse_type _1 )
# 1104 "src/parser/parser.ml"
               : 'type_))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'rev_type_list_arrow) in
    Obj.repr(
# 255 "src/parser/parser.mly"
                                      ( FunT (List.rev _2) )
# 1111 "src/parser/parser.ml"
               : 'type_))
; (fun __caml_parser_env ->
    Obj.repr(
# 256 "src/parser/parser.mly"
          ( _raise_error "type" )
# 1117 "src/parser/parser.ml"
               : 'type_))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 260 "src/parser/parser.mly"
          ( [_1] )
# 1124 "src/parser/parser.ml"
               : 'rev_type_list_arrow))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'rev_type_list_arrow) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_) in
    Obj.repr(
# 261 "src/parser/parser.mly"
                                    ( _3 :: _1 )
# 1132 "src/parser/parser.ml"
               : 'rev_type_list_arrow))
; (fun __caml_parser_env ->
    Obj.repr(
# 262 "src/parser/parser.mly"
          ( _raise_error "rev_type_list_arrow" )
# 1138 "src/parser/parser.ml"
               : 'rev_type_list_arrow))
(* Entry module_ *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let module_ (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.module_t)
