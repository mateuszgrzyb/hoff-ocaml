

# type List
#     | Nill
#     | Cons (Int, List)
# 
# val j: Int = 1
# 
# val f: Float = 3.3
# 
# fun fun1(a: Float, b: Float): Float = 
#     a + b
# 
# fun fun2(a: Float): Float = 
#     fun1(a, a)
# 
fun something(a: Int, b: Int, f: (Int -> Int -> Int)): Int =
    let
        fun local1(a1: Int): Int = a1 + 1
        fun local2(a1: Int): Int = a1 + 2
        fun local3(a1: Int): Int = a1 + 3
    in 
        if f(a, b) > 3
        then local1(a)
        else local1(b)
# 
# # fun head(l: List): Int =
# #     case l 
# #     | Nill -> -1
# #     | Cons (a, _) -> a
# 
# fun test(b: Bool): Bool = 
#     b


fun test(i: Int): Bool = i < 0

val blabla: Int = something(22, 23, fun(a: Int, b: Int): Int -> a + b)
